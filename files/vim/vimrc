" Best view with a 256 color terminal and Powerline fonts

" Plugins {
  set nocompatible
  filetype off
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()
  Plugin 'VundleVim/Vundle.vim'

  Plugin 'tpope/vim-sensible'
  Plugin 'vim-airline/vim-airline'
  Plugin 'vim-airline/vim-airline-themes'
  Plugin 'breuckelen/vim-resize'
  Plugin 'airblade/vim-gitgutter'
  Plugin 'tpope/vim-fugitive'
  Plugin 'gregsexton/gitv'
  Plugin 'junegunn/gv.vim'
  Plugin 'ctrlpvim/ctrlp.vim'
  Plugin 'scrooloose/nerdtree'
  Plugin 'nelstrom/vim-visual-star-search'
  Plugin 'chrisbra/vim-diff-enhanced'
  Plugin 'MarcWeber/vim-addon-mw-utils' "requiered by snipmate
  Plugin 'tomtom/tlib_vim' "requiered by snipmate
  Plugin 'garbas/vim-snipmate'
  Plugin 'honza/vim-snippets'
  Plugin 'Valloric/YouCompleteMe'
  Plugin 'ervandew/supertab'
  Plugin 'Yggdroot/indentLine'
  Plugin 'tpope/vim-surround'
  Plugin 'tpope/vim-repeat'
  Plugin 'tomtom/tcomment_vim'
  Plugin 'ryanoasis/vim-devicons'
  Plugin 'Townk/vim-autoclose'
  Plugin 'tpope/vim-endwise'
  Plugin 'elzr/vim-json'
  Plugin 'Konfekt/FastFold'
  Plugin 'luisdavim/pretty-folds'
  Plugin 'scrooloose/syntastic'
  Plugin 'flazz/vim-colorschemes'
  Plugin 'nginx.vim'
  Plugin 'benmills/vimux'

  " All of your Plugins must be added before the following line
  call vundle#end()            " required
  filetype plugin indent on    " required
  " To ignore plugin indent changes, instead use:
  "filetype plugin on
" }

" ColorThemes {
  highlight clear
  set background=dark
  set t_Co=256

  " Use GIU colors
  " if (has("nvim"))
  "   let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  " else
  "   let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  "   let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  " endif
  " if (has("termguicolors"))
  "   set termguicolors
  " endif

  if has('gui_macvim')
    set transparency=10
  endif

  color Tomorrow-Night-Bright
  " color one

  " Overrides
  set background=dark

  au ColorScheme * hi! FoldColumn ctermbg=none ctermfg=none guibg=NONE
  au ColorScheme * hi! Normal ctermbg=none guibg=NONE
  au ColorScheme * hi! NonText ctermbg=none guibg=NONE
  au ColorScheme * hi! Folded ctermbg=none guibg=NONE
  au ColorScheme * hi! CursorLine ctermfg=none guifg=NONE gui=NONE term=NONE cterm=NONE

  set fillchars+=vert:│
  au ColorScheme * hi VertSplit cterm=none ctermfg=Black ctermbg=none

  set guifont=droid\ sans\ mono\ for\ powerline\ plus\ nerd\ file\ types\ 10
" }

" GeneralSettings {
  " Open files allways in new tabs
  if ! &diff
    autocmd VimEnter * tab all
    "autocmd BufAdd * exe 'tablast | tabe "' . expand( "<afile") .'"'
  endif
  if has("autocmd")
      au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
  endif
  if has('autocmd')
    filetype plugin indent on
  endif
  if has('syntax') && !exists('g:syntax_on')
    syntax enable
  endif

  " GUI options:
  "set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
  set guioptions-=L  "remove left-hand scroll bar

  " Use :help 'option' to see the documentation for the given option.
  set autoindent
  set smartindent
  set backspace=indent,eol,start
  set complete-=i
  set showmatch
  set showmode
  set smarttab
  set scrolloff=1
  if !&diff
    set cursorline
  endif

  set nrformats-=octal
  set shiftround

  set clipboard=unnamedplus

  set regexpengine=1
  set ttyfast
  set lazyredraw
  set ttimeout
  set ttimeoutlen=50
  set updatetime=250

  set laststatus=2
  set ruler
  set showcmd
  set wildmenu

  set autoread

  autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\]" contained conceal containedin=AL

  set encoding=utf-8
  set tabstop=2 shiftwidth=2 expandtab
  set listchars=tab:▒░,trail:▓
  set list

  set number
  set incsearch
  set hlsearch
  set ignorecase
  set smartcase

  " In many terminal emulators the mouse works just fine, thus enable it.

  " Enable (better) mouse support under tmux
  " do not history when leavy buffer
  set hidden

  set nobackup
  set nowritebackup
  set noswapfile
  set fileformats=unix,dos,mac

  set completeopt=menuone,longest,preview
" }

" PluginSettings {

  " vim-resize
  let g:vim_resize_disable_auto_mappings = 1
  nnoremap <silent> <S-Left> :CmdResizeLeft<cr>
  nnoremap <silent> <S-Down> :CmdResizeDown<cr>
  nnoremap <silent> <S-Up> :CmdResizeUp<cr>
  nnoremap <silent> <S-Right> :CmdResizeRight<cr>

  " matchparen
  let g:matchparen_timeout = 2
  let g:matchparen_insert_timeout = 2

  " GeekNote
  "let g:GeeknoteFormat="markdown"

  " Syntastic
  let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes':   [],'passive_filetypes': [] }
  noremap <C-w>e :SyntasticCheck<CR>
  noremap <C-w>f :SyntasticToggleMode<CR>

  " Gundu
  " let g:gundo_width = 60
  " let g:gundo_preview_height = 40
  " let g:gundo_right = 1

  " MinMap
  let g:minimap_highlight='Visual'

  " IndentLine
  let g:indentLine_faster = 1
  if g:indentLine_faster == 0
   let g:indentLine_leadingSpaceEnabled = 1
  endif
  let g:vim_json_syntax_conceal = 0
  let g:indentLine_char = '┊'
  let g:indentLine_leadingSpaceChar = '˰'
  let g:indentLine_noConcealCursor = ""
  " set conceallevel=1
  " let g:indentLine_conceallevel=1

  " Conoline
  " if !&diff
  "   let g:conoline_auto_enable = 1
  " endif

  " Vim
  let g:indentLine_color_term = 239
  "GVim
  let g:indentLine_color_gui = '#A4E57E'
  " none X terminal
  let g:indentLine_color_tty_light = 7 " (default: 4)
  let g:indentLine_color_dark = 1 " (default: 2)'

  " CtrlP
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
  " NOTE: The following should make CtrlP faster
  "let g:ctrlp_match_window = 'bottom,order:ttb'
  "let g:ctrlp_switch_buffer = 0
  "let g:ctrlp_working_path_mode = 0
  "if executable('ag')
    "set grepprg=ag\ --nogroup\ --nocolor
    "let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
    "let g:ctrlp_use_caching = 0
  "endif
  "let g:ctrlp_working_path_mode = 'ra'
  " Always open files in new tabs
  let g:ctrlp_prompt_mappings = {
      \ 'AcceptSelection("e")': ['<c-t>'],
      \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
      \ }

  " Ultisnip
  " NOTE: <f1> otherwise it overrides <tab> forever
  let g:UltiSnipsExpandTrigger="<C-tab>"
  let g:UltiSnipsJumpForwardTrigger="<C-tab>"
  let g:UltiSnipsJumpBackwardTrigger="<C-S-tab>"
  let g:did_UltiSnips_vim_after = 1

  " make YCM compatible with UltiSnips (using supertab)
  let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
  let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
  let g:SuperTabDefaultCompletionType = '<C-n>'
  " Disable YCM
  let g:loaded_youcompleteme = 1

  " Brackets
  let g:usemarks = 0

  " vim-airline
  " let g:airline_extensions = ['branch', 'tabline', 'whitespace']
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_min_count = 1
  let g:airline#extensions#tabline#show_buffers = 1
  let g:airline_powerline_fonts = 1
  let g:airline_theme='term'
  " let g:airline_theme='one'
" }

" Shortcuts {

  " Don't use Ex mode, use Q for formatting
  map Q gq

  " Use <C-L> to clear the highlighting of :set hlsearch.
  if maparg('<C-L>', 'n') ==# ''
    nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
  endif

  inoremap <C-U> <C-G>u<C-U>

  " FIXME: (broken) ctrl s to save
  noremap  <C-s> :update<CR>
  vnoremap <C-s> <C-C>:update<CR>
  inoremap <C-s> <Esc>:update<CR>

  " exit insert mode
  inoremap <C-c> <Esc>

  " indend / deindent after selecting the text with (⇧ v), (.) to repeat.
  vnoremap <Tab> >
  vnoremap <S-Tab> <
  " comment / decomment & normal comment behavior
  vmap <C-m> gc
  vmap <C-/> gc
  nnoremap <C-/> gcc
  inoremap <C-/> gcc
  " Disable tComment to escape some entities
  let g:tcomment#replacements_xml={}
  " Text wrap simpler, then type the open tag or ',"
  vmap <C-w> S

  " Cut, Paste, Copy
  vmap <C-x> d
  vmap <C-v> p
  vmap <C-c> y

  map <F1> maGG=g`a<CR>
  nnoremap <F3> :set nowrap!<CR>
  nnoremap <F4> :set invpaste paste?<CR>
  nnoremap <F5> :set nohlsearch!<CR>

  set pastetoggle=<F4>
  " Use a scratch file for clipboard
  "vmap <leader>y :w! /tmp/vitmp<CR>
  "nmap <leader>p :r! cat /tmp/vitmp<CR>
  vmap <leader>y "*y
  nmap <leader>p "*p

  " Undo, Redo (broken)
  nnoremap <C-z> :undo<CR>
  inoremap <C-z> <Esc>:undo<CR>
  nnoremap <C-y> :redo<CR>
  inoremap <C-y> <Esc>:redo<CR>

  noremap <Leader>i :set list!<CR>

  " Tabs

  " Tab navigation
  nnoremap <S-PageUp>   :tabprevious<CR>
  inoremap <S-PageUp>   <Esc>:tabprevious<CR>i
  nnoremap <S-PageDown> :tabnext<CR>
  inoremap <S-PageDown> <Esc>:tabnext<CR>i
  nnoremap <C-t>        :tabnew<CR>
  inoremap <C-t>        <Esc>:tabnew<CR>i
  nnoremap <C-k>        :tabclose<CR>
  inoremap <C-k>        <Esc>:tabclose<CR>i
  nnoremap <S-h>        gT
  nnoremap <S-l>        gt

  " tab navigation like firefox
  " nnoremap <C-S-tab> :tabprevious<CR>
  " nnoremap <C-tab>   :tabnext<CR>
  " nnoremap <C-t>     :tabnew<CR>
  " inoremap <C-S-tab> <Esc>:tabprevious<CR>i
  " inoremap <C-tab>   <Esc>:tabnext<CR>i
  " inoremap <C-t>     <Esc>:tabnew<CR>

  " lazy ':'
  map ; :

  let mapleader = '\'
  nnoremap <Leader>p :set paste<CR>
  nnoremap <Leader>o :set nopaste<CR>
  noremap  <Leader>g :GitGutterToggle<CR>
  noremap  <Leader>tb :TagbarToggle<CR>
  noremap  <Leader>nt :NERDTreeToggle<CR>
  noremap  <C-\> :NERDTreeToggle<CR>
  nmap     <leader>TB <Plug>ToggleBrackets
  imap     <leader>TB <Plug>ToggleBrackets
  noremap  <leader>co :diffoff!<CR><C-W><C-O>

  "  Window management:
  nnoremap <Leader>sv :windo wincmd K<CR>
  nnoremap <Leader>sh :windo wincmd H<CR>

  " fugitive git bindings
  "vimdiff current vs git head (fugitive extension)
  nnoremap <Leader>gd :Gdiff<cr>
  nnoremap <Leader>gdm :Gdiff master<cr>
  "switch back to current file and closes fugitive buffer
  "nnoremap <Leader>gD :diffoff!<cr><c-w>h:bd<cr>
  nnoremap <Leader>gD <c-w>h<c-w>c
  nnoremap <Leader>ga :Git add %:p<CR><CR>
  nnoremap <Leader>gs :Gstatus<CR>
  nnoremap <Leader>gc :Gcommit -v -q<CR>
  nnoremap <Leader>gt :Gcommit -v -q %:p<CR>
  nnoremap <Leader>ge :Gedit<CR>
  nnoremap <Leader>gr :Gread<CR>
  nnoremap <Leader>gw :Gwrite<CR><CR>
  nnoremap <Leader>gbl :Gblame<CR>
  nnoremap <Leader>gl :silent! Glog<CR>:bot copen<CR>
  nnoremap <Leader>gp :Ggrep<Space>
  nnoremap <Leader>gm :Gmove<Space>
  nnoremap <Leader>gb :Git branch<Space>
  nnoremap <Leader>go :Git checkout<Space>
  nnoremap <Leader>gps :Dispatch! git push<CR>
  nnoremap <Leader>gpl :Dispatch! git pull<CR>
  nnoremap <Leader>g- :Silent Git stash<CR>:e<CR>
  nnoremap <Leader>g+ :Silent Git stash pop<CR>:e<CR>

" }

command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

fun! DiffToggle()
    if &diff
       windo set cursorline
       windo diffoff
    else
       windo set nocursorline
       windo diffthis
    endif
:endfun

command! DiffToggle call DiffToggle()
nnoremap <silent> <Leader>df :call DiffToggle()<CR>

fun! TrimWhitespace()
  let l:save_cursor = getpos('.')
  %s/\s\+$//e
  call setpos('.', l:save_cursor)
endfun



command! TrimWhitespace call TrimWhitespace()
noremap <Leader>w :call TrimWhitespace()<CR>
" Some people like to automatically do this before they write a file to disk, like so:
"autocmd BufWritePre * :call TrimWhitespace()

" this machine config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif


if exists("g:loaded_webdevicons")
  call webdevicons#refresh()
endif
